#!/usr/bin/env python3
#
# Copyright (C) 2023 Wind River Systems, Inc.
#
# SPDX-License-Identifier: MIT
#

import os
import sys
import re
import argparse
import json
import logging
import subprocess
import time
import glob
import shutil
import xml.etree.ElementTree as ET

# dataclass is new in 3.7
if sys.version_info < (3, 7, 0):
    raise RuntimeError("Sorry, python 3.7.0 or later is required")

from dataclasses import dataclass, asdict
import bootlogParser
import tftpy

logger = logging.getLogger('boot-tf')

def set_logger(logger):
    logger.setLevel(logging.DEBUG)

    class ColorFormatter(logging.Formatter):
        FORMAT = ("$BOLD%(name)-s$RESET - %(levelname)s: %(message)s")

        BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE = list(range(8))

        RESET_SEQ = "\033[0m"
        COLOR_SEQ = "\033[1;%dm"
        BOLD_SEQ = "\033[1m"

        COLORS = {
            'WARNING': YELLOW,
            'INFO': GREEN,
            'DEBUG': BLUE,
            'ERROR': RED
        }

        def formatter_msg(self, msg, use_color = True):
            if use_color:
                msg = msg.replace("$RESET", self.RESET_SEQ).replace("$BOLD", self.BOLD_SEQ)
            else:
                msg = msg.replace("$RESET", "").replace("$BOLD", "")
            return msg

        def __init__(self, use_color=True):
            msg = self.formatter_msg(self.FORMAT, use_color)
            logging.Formatter.__init__(self, msg)
            self.use_color = use_color

        def format(self, record):
            levelname = record.levelname
            if self.use_color and levelname in self.COLORS:
                fore_color = 30 + self.COLORS[levelname]
                levelname_color = self.COLOR_SEQ % fore_color + levelname + self.RESET_SEQ
                record.levelname = levelname_color
            return logging.Formatter.format(self, record)

    # create console handler and set level to debug
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    ch.setFormatter(ColorFormatter())
    logger.addHandler(ch)

set_logger(logger)

@dataclass
class metaEvt:
    name: str
    ph:   str
    pid:  int
    tid:  int
    args: object

@dataclass
class UnitPropsBootchart:
    name: str
    start: float
    dur: float

@dataclass
class UnitPropsPlot:
    name: str
    activating: float
    activating_time: float
    active: float
    active_time: float
    deactivating: float
    deactivating_time: float

# Google Trace Event Format
# https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/preview
# https://github.com/catapult-project/catapult/tree/master/tracing

# Complete Event ph = X is a combination of B and E Duration Events
@dataclass
class PhaseX:
    name: str
    cat:  str
    ph:   str
    ts:   float
    pid:  int
    tid:  int
    dur:  float
    args: object

def run_cmd(cmd, sleep_time, max_seconds):
    counter = 0
    while counter < max_seconds:
        logger.info('Running %s' % ' '.join(cmd))
        ret = subprocess.run(cmd, capture_output=True)
        print(ret)
        if ret.returncode == 0:
            return ret
        else:
            counter += 1
            logger.info("cmd '%s' failed, sleeping 1 seconds and try again (cur: %s, max: %s)" % \
                    (' '.join(cmd), counter, max_seconds))
            time.sleep(sleep_time)
    if counter >= max_seconds:
        logger.error("cmd %s after %s seconds" % (' '.join(cmd), max_seconds))
    return None

def to_ms(time_input):
    # systemd-bootchart only supports ms and s.
    ret = ""
    if time_input.endswith('ms'):
        ret = float(time_input[:-2])
    # Convert time to ms
    elif time_input.endswith('s'):
        ret = float(time_input[:-1]) * 1000
    else:
        logger.error('Unknown time unit: %s' % time_input)
    return ret

def get_summary_bootchart(root):
    summary = ""
    for child_level_1 in root:
        # Add a blank line for a good look
        if summary:
            summary += '\n'
        for child_level_2 in child_level_1:
            if child_level_2.text:
                # Begin
                if child_level_2.text.startswith('Bootchart for'):
                    summary = '%s\n' % child_level_2.text
                elif summary:
                    summary += '%s\n' % child_level_2.text

    if not summary:
        logger.error('Failed to get summmary')
    return summary

def get_units_bootchart(root, total_time):
    p_begin = False
    for i in root.iter():
        # Package begin
        if i.get('class') == 'ps':
            logger.debug('Package begin: %s: %s' % (i.tag, i.attrib))
            p_begin = True
            start = round(float(i.get('x')), 3)
        if p_begin:
            if i.tag.endswith('}text'):
                name = i.text
            # Package End
            if i.tag.endswith('}tspan'):
                logger.debug('Package end: %s: %s' % (i.tag, i.attrib))
                dur = cur_or_max(round(float(to_ms(i.text)), 3), total_time)
                p_begin = False
                yield(UnitPropsBootchart(name, start, dur))

def get_summary_plot(root):
    # Get summary
    summary = ""
    for child in root:
        if child.tag.endswith('}text'):
            for e in child.iter():
                summary += "%s\n" % e.text

    if not summary:
        logger.error('Failed to get summmary')
    return summary

def get_total_time(root):
    for i in root.iter():
        if i.get('class') == 'box':
            return float(i.get('width'))

def cur_or_max(cur, total_time):
    """
    Print a warning when the width is larger than max_time, and
    truncate it to max_time.
    """
    max_time = total_time
    if cur > max_time:
        logger.warning("%s is larger than max_time %s, truncating to %s." % (cur, max_time, max_time))
        logger.warning("This might be a bug in the svg file.")
        return max_time
    else:
        return cur

def get_width(iterator, total_time):
    width = round(float(iterator.get('width')), 3)
    return cur_or_max(width, total_time)

def get_units_plot(root):
    total_time = get_total_time(root)
    g_begin = False
    p_begin = False
    for i in root.iter():
        # Graphic end
        if g_begin and i.tag.endswith('}g'):
            logger.debug('Graphic End: %s: %s' % (i.tag, i.attrib))
            break

        # Graphic begin
        if i.tag.endswith('}g'):
            g_begin = True
            continue
        if not g_begin:
            continue

        if i.get('class') == 'box':
            continue

        # Package begin
        if i.tag.endswith('}rect') and not p_begin:
            logger.debug('Package begin: %s: %s' % (i.tag, i.attrib))
            p_begin = True
            # Reset vars
            activating = -1
            activating_time = -1
            active = -1
            active_time = -1
            deactivating = -1
            deactivating_time = -1
            start = float(i.get('x'))
            end = get_width(i, total_time)
        if p_begin:
            if i.get('class') == 'activating':
                activating = float(i.get('x'))
                activating_time = get_width(i, total_time)
            elif i.get('class') == 'active':
                active = float(i.get('x'))
                active_time = get_width(i, total_time)
            elif i.get('class') == 'deactivating':
                deactivating = float(i.get('x'))
                deactivating_time = get_width(i, total_time)
            # Package end
            elif i.get('class') == 'left':
                logger.debug('Package end: %s: %s' % (i.tag, i.attrib))
                name = i.text
                p_begin = False
                if active == -1:
                    activating = start
                    activating_time = end
                yield(UnitPropsPlot(name, activating, activating_time, active, active_time, deactivating, deactivating_time))

class BootTF(object):
    def __init__(self):

        # Server settings
        self.server_ip = "0.0.0.0"
        self.server_port = 69
        self.server_ip_port = "%s:%s" % (self.server_ip, self.server_port)

        self.LinuxStartTime = 0

        self.tftproot = "/var/lib/tftproot"

        self.client = ''

        parser = argparse.ArgumentParser(
            description="Convert svg file to tracing file (json), or merge multiple json files into one.\
                    The svg file is from systemd-bootchart or 'systemd-analyze plot'",
            epilog="Use %(prog)s --help to get help")
        parser.add_argument("-m", "--merge",
            help = "Merge multiple tracing event files (json) into one.", nargs = '+', action='store', default=[])
        parser.add_argument("-c", "--convert",
            help = "Convert the svg file to json", action='store', default='')
        parser.add_argument("-p", "--plot",
            help = "Read input from 'systemd-analyze plot' and convert it to a json file", action='store_true', default=False)
        parser.add_argument("-b", "--bootchart",
            help = "Read svg file from /run/log/bootchart-*.svg which is generated by systemd-bootchart, and convert it to a json file", action='store_true', default=False)
        parser.add_argument("-o", "--output-dir",
            help = "Specify output dir", action='store', default='')
        parser.add_argument("-v", "--vxworks",
            help = "Download VxWorks and Hypervisor boot logs from given IP address",
            action='store', default='')
        parser.add_argument("-l", "--download",
            help = "Download manifest and logs from given IP address",
            action='store', default='')
        parser.add_argument("-u", "--upload", nargs="?",
            help = "Upload manifest and logs to given IP address, use dowload IP address when the address is not specified",
            action='store', default='')
        parser.add_argument("-s", "--server",
            help = "Start tftp server, the format is [ip[:port]], default: %s" % self.server_ip_port,
            action='store', const="%s" % self.server_ip_port, nargs='?')
        parser.add_argument("-r", "--tftproot",
            help = "Specify the tftproot, default: %s" % self.tftproot,
            action='store', const="%s" % self.tftproot, nargs='?')
        parser.add_argument("-d", "--debug",
            help = "Enable debug output",
            action="store_const", const=logging.DEBUG, dest="loglevel", default=logging.INFO)
        parser.add_argument("-q", "--quiet",
            help = "Hide all output except error messages",
            action="store_const", const=logging.ERROR, dest="loglevel")

        self.args = parser.parse_args()

        self.args.output_dir = self.args.output_dir.strip()
        if self.args.output_dir and not os.path.exists(self.args.output_dir):
            os.makedirs(self.args.output_dir)

        logger.setLevel(self.args.loglevel)

        if len(sys.argv) == 1:
            parser.print_help()

        if self.args.tftproot and not self.args.server:
            logger.error("--tftproot only works when --server is specified")
            sys.exit(1)

        self.svg = self.args.convert

        self.scale_bootchart = 1000
        self.scale_plot = 10000

        self.from_bootchart_file = False
        self.from_plot_file = False

        self.events = []
        self.cat  = 'Linux'
        self.ph   = 'X'
        self.linux_pid = 0

        # Default name
        self.process_name = 'Linux'

        self.time_now = time.strftime("%Y%m%d-%H%M")

        self.manifest = "boot-tf.manifest"
        self.new_logs = []

    def write_out_json(self, outfile):
        trace_file_data = {
            "traceEvents": self.events,
            }

        outfile_bn = os.path.basename(outfile)
        dumps = json.dumps(trace_file_data, indent=2)
        outfile = self.output_dir_file(outfile_bn)
        with open(outfile, 'w') as f:
            f.write(dumps)

        logger.info('The output is saved to %s' % outfile)

        # Append to new_logs
        if not outfile_bn in self.new_logs:
            logger.debug('Adding %s to new_logs' % outfile_bn)
            self.new_logs.append(outfile_bn)

    def to_boot_tf(self, from_file=True):
        if from_file:
            if not self.svg.endswith('.svg'):
                raise Exception("Not a svg file: %s" % self.svg)
            json_out = '%s.json' % self.svg[0:-4]

            bootchart_key = '<!-- This file is a bootchart SVG file'
            plot_key = '<!-- This file is a systemd-analyze SVG file'

            # Check file type
            with open(self.svg) as f:
                for line in f.readlines():
                    if line.startswith(bootchart_key):
                        self.from_bootchart_file = True
                        break
                    if line.startswith(plot_key):
                        self.from_plot_file = True
                        break

            if (not self.from_bootchart_file) and (not self.from_plot_file):
                raise Exception("Not a 'systemd-bootchart' or 'systemd-analyze plot' svg file: %s" % self.svg)

            tree = ET.parse(self.svg)
            self.root = tree.getroot()
        else:
            json_out = 'systemd-analyze-plot-%s.json' % self.time_now

        if self.from_plot_file or self.args.plot:
            logger.info("Converting plot svg file to json...")
            self.plot_to_events()

        if self.from_bootchart_file:
            logger.info("Converting bootchart svg file to json...")
            self.bootchart_to_events()

        self.write_out_json(json_out)

    def add_meta_event(self, name, tid, args):
        """
        Set process or thread name
        """
        self.events.append(asdict(metaEvt(name, 'M', self.linux_pid, tid, args)))

    def add_init_event(self, tid, dur, args):
        """
        Initial event
        """
        self.events = []
        self.events.append(asdict(PhaseX('', '', 'i', 0, self.linux_pid, tid, 0, ())))  # dummy zero width event
        self.events.append(asdict(PhaseX('Summary', self.cat, self.ph, self.LinuxStartTime, self.linux_pid, tid, dur, args)))
        self.add_meta_event('process_name', 0, {'name': self.process_name})
        self.add_meta_event('thread_name', tid, {'name': 'Summary'})
        self.add_meta_event('thread_sort_index', tid, {'sort_index': tid})

    def add_event_plot(self, tid, unit, name, ts, dur, args=None):
        if not args:
            args = unit
        ts = self.LinuxStartTime + ts * self.scale_plot
        dur = dur * self.scale_plot
        self.events.append(asdict(PhaseX(name, self.cat, self.ph, ts, self.linux_pid, tid, dur, args)))

    def plot_to_events(self):
        summary = get_summary_plot(self.root)
        self.process_name = summary.split('\n')[-2]
        self.process_name = self.process_name.split(' (')[0].replace('Wind River Linux', 'WRLinux')

        summary = {'summary': summary}
        dur = get_total_time(self.root) * self.scale_plot
        tid = 0
        self.add_init_event(tid, dur, summary)

        for unit in get_units_plot(self.root):
            tid += 1
            name = unit.name
            if unit.active == -1:
                self.add_event_plot(tid, unit, name, unit.activating, unit.activating_time)
            else:
                if unit.active_time > 0:
                    self.add_event_plot(tid, unit, name, unit.active, unit.active_time)

                if unit.activating_time > 0:
                    if unit.active_time > 0:
                        name = 'Activating'
                    self.add_event_plot(tid, unit, name, unit.activating, unit.activating_time)
                if unit.deactivating_time > 0:
                    name = 'Deactivating'
                    self.add_event_plot(tid, unit, name, unit.deactivating, unit.deactivating_time)
            self.add_meta_event('thread_name', tid, {'name': unit.name})
            self.add_meta_event('thread_sort_index', tid, {'sort_index': tid})

    def add_event_bootchart(self, tid, unit, args=None):
        ts = self.LinuxStartTime + unit.start * self.scale_bootchart
        dur = unit.dur * self.scale_bootchart
        if not args:
            args = unit
        self.events.append(asdict(PhaseX(unit.name, self.cat, self.ph, ts, self.linux_pid, tid, dur, args)))

    def bootchart_to_events(self):
        tid = 0
        # Summary
        summary = get_summary_bootchart(self.root)
        machine = ''
        for line in summary.split('\n'):
            if line.startswith('Build: '):
                self.process_name = line.replace('Build: ', '').replace('Wind River Linux', 'WRLinux')
            elif line.startswith('Bootchart for'):
                machine = line.split()[2]

        if machine:
            self.process_name += ' %s' % machine


        summary = {'summary': summary}
        total_time = float(self.root.get('width').replace('px', ''))
        total_time_scaled = float(self.root.get('width').replace('px', '')) * self.scale_bootchart
        self.add_init_event(tid, total_time_scaled, summary)

        for unit in get_units_bootchart(self.root, total_time):
            tid += 1
            self.add_event_bootchart(tid, unit)
            self.add_meta_event('thread_name', tid, {'name': unit.name})
            self.add_meta_event('thread_sort_index', tid, {'sort_index': tid})

    def merge(self, filelist=[]):
        """
        Merge multiple json files into one and re-assign pid
        """

        logger.info('Merging json files...')
        if not filelist:
            filelist = self.args.merge
        total = len(filelist)
        if total <= 1:
            logger.error('Need at least two json files to merge')
            return

        json_out = "merged-boot-tf-%s.json" % self.time_now

        self.events = []
        # One pid can only be in one file, otherwise, we need increase the pid
        # number.
        pid_file = dict()
        pid_to_new_pid = dict()
        with open(json_out, "w") as f:
            for json_file in filelist:
                if not json_file.endswith('.json'):
                    raise Exception("Not a json file: %s" % json_file)
                logger.info("Handling %s..." % json_file)
                with open(self.output_dir_file(json_file),'r+') as f:
                    data = json.load(f)
                    events_in = data.get('traceEvents')
                    for event in events_in:
                        pid = event['pid']
                        if not pid in pid_file:
                            pid_file[pid] = json_file
                        else:
                            # Check same pid in different files
                            if json_file != pid_file[pid]:
                                saved_pid = '%s:%s' % (json_file, pid)
                                if saved_pid in pid_to_new_pid:
                                    pid = pid_to_new_pid[saved_pid]
                                else:
                                    while True:
                                        pid += 1
                                        if not pid in pid_file:
                                            break
                                event['pid'] = pid
                                pid_file[pid] = json_file
                                pid_to_new_pid[saved_pid] = pid
                        self.events.append(event)
                        self.linux_pid = pid
                        self.add_meta_event('process_sort_index', 0, {'sort_index': pid})

        self.write_out_json(json_out)

    def run_systemd_analyze_plot(self):
        # Make sure the boot is completed
        default_target = 'multi-user.target'
        cmd = ['systemctl', 'is-active', default_target]
        # Wait at most 10 mins
        ret = run_cmd(cmd, 1, 600)
        if not ret:
            sys.exit(1)

        cmd = ['systemd-analyze', 'plot']
        # There might be no events even if multi-user.target is active, wait at
        # most 1 min
        ret = run_cmd(cmd, 1, 60)
        if ret:
            svg = ret.stdout
        else:
            sys.exit(1)
        self.root = ET.fromstring(svg)

    def get_bootchart_svg(self):
        pattern = '/run/log/bootchart-*.svg'
        counter = 0
        # Wait at most 10mins
        max_time = 600
        self.svg = ""
        while counter < 600:
            svgs = glob.glob(pattern)
            if not svgs:
                counter += 5
                logger.info("%s is not ready, sleeping 5 seconds and try again (cur: %s, max: %s)" % \
                        (pattern, counter, max_time))
                time.sleep(5)
            else:
                self.svg = sorted(svgs, key=os.path.getmtime)[-1]
                break
        if not self.svg:
            logger.error("Failed to find %s after %s seconds" % (pattern, max_seconds))
            sys.exit(1)

    def get_vxworks_tf(self, src_ip):
        logger.info('Downloading VxWorks logs...')
        vx_tf = bootlogParser.VxBootTF()
        fname, count = vx_tf.getLogs(src_ip)

        # Append to new logs
        for v in vx_tf.txtFiles:
            # move files to output_dir if specified
            if self.args.output_dir:
                shutil.move(v[0], self.output_dir_file(v[0]))

            logger.debug('Adding %s to new_logs' % v[0])
            self.new_logs.append(v[0])

        if os.path.exists(fname):
            logger.debug('Adding %s to new_logs' % fname)
            self.new_logs.append(fname)
            if self.args.output_dir:
                shutil.move(fname, self.output_dir_file(fname))

        return vx_tf

    def server(self, server):
        """
        Start tftp server
        """
        if self.args.tftproot:
            self.tftproot = self.args.tftproot
        if not os.path.exists(self.tftproot):
            os.makedirs(self.tftproot)
        if self.args.server:
            if ':' in self.args.server:
                self.server_ip = self.args.server.split(':')[0]
                self.server_port = int(self.args.server.split(':')[1])
            else:
                self.server_ip = self.args.server

        logger.info("Starting tftp server: ip: %s:%s, tftproot: %s" % (self.server_ip, self.server_port, self.tftproot))
        try:
            server = tftpy.TftpServer(self.tftproot)
            server.listen(self.server_ip, self.server_port)
        except tftpy.TftpException as esc:
            logger.error('%s' % str(esc))
            sys.exit(1)
        except KeyboardInterrupt:
            logger.info("Interrupted by user")

    def update_manifest(self):
        """
        Save logs in manifest for downloading since tftp doesn't provide list
        functions
        """
        manifest = self.output_dir_file(self.manifest)

        out_logs = []
        need_update = False
        if os.path.exists(manifest):
            with open(manifest, 'r') as f:
                out_logs = f.readlines()
        for l in self.new_logs:
            l_suffix = l + '\n'
            if not l_suffix in out_logs:
                out_logs.append(l_suffix)
                need_update = True
        if need_update:
            logger.info('Updating %s' % manifest)
            with open(manifest, 'w') as f:
                f.write(''.join(out_logs))
        else:
            logger.debug('%s is up-to-date' % manifest)

    def download_file(self, filename):
        logger.info("Downloading %s..." % filename)

        output_path = self.output_dir_file(filename)
        try:
            self.client.download(filename, output_path, timeout=10, retries=2)
        except tftpy.TftpException as e:
            logger.error('Failed to download %s: %s' % (filename, str(e)))
            return ''
        return output_path

    def download(self):
        """
        - Download manifest
        - Download logs according to manifest
        """
        self.client = tftpy.TftpClient(self.args.download)
        manifest = self.download_file(self.manifest)
        if manifest:
            with open(manifest) as f:
                for m in f.readlines():
                    filename = m.strip()
                    log = self.download_file(filename)
                    if log:
                        self.new_logs.append(filename)

    def upload_file(self, filename):
        logger.info("Uploading %s..." % filename)

        source_path = self.output_dir_file(filename)
        if os.path.exists(source_path):
            try:
                self.client.upload(filename, source_path, timeout=10, retries=2)
            except tftpy.TftpException as e:
                logger.error('Failed to upload %s: %s' % (source_path, str(e)))
        else:
            logger.error('Failed to find %s' % source_path)
        return source_path

    def upload(self):
        """
        - Upload manifest
        - Upload logs according to manifest
        """
        self.client = tftpy.TftpClient(self.args.upload)

        # Upload files first
        manifest = self.output_dir_file(self.manifest)
        if os.path.exists(manifest):
            with open(manifest) as f:
                for m in f.readlines():
                    name = m.strip()
                    self.upload_file(name)
            # Upload manifest at last
            self.upload_file(self.manifest)
        else:
            logger.error('Failed to find manifest: %s' % manifest)

    def output_dir_file(self, filename):
        output_dir = self.args.output_dir
        if output_dir:
            filename = os.path.join(output_dir, filename)
        return filename

def main():
    boot_tf = BootTF()

    # The VxWorks logs need to be retrieved first so that
    # the Linux VM start time can be pulled from the hypervisor logs
    # and used to offset the bootchart timestamps.
    # Then the Linux events can be aligned correctly relative to
    # the VxWorks events in the Google Trace Viewer output.
    if boot_tf.args.vxworks:
        vx_tf = boot_tf.get_vxworks_tf(boot_tf.args.vxworks.strip())
        logger.debug('guestOS matches: %s' % str(vx_tf.vmLoadTimes))
        boot_tf.LinuxStartTime = vx_tf.getLinuxStartTime()
        logger.info('LinuxStartTime %d' % boot_tf.LinuxStartTime)

    if boot_tf.args.plot:
        boot_tf.run_systemd_analyze_plot()
        boot_tf.to_boot_tf(from_file=False)

    if boot_tf.args.bootchart:
        boot_tf.get_bootchart_svg()
        boot_tf.to_boot_tf()

    if boot_tf.args.convert:
        boot_tf.to_boot_tf()

    if boot_tf.args.download:
        boot_tf.download()

    if boot_tf.args.merge:
        boot_tf.merge()

    boot_tf.update_manifest()

    # The upload be done after update_manifest
    if boot_tf.args.upload:
        filelist = []
        manifest = boot_tf.output_dir_file(boot_tf.manifest)
        if os.path.exists(manifest):
            with open(manifest) as f:
                for m in f.readlines():
                    name = m.strip()
                    if name.startswith('merged-boot-tf-') or not name.endswith('.json'):
                        logger.debug('Skipping %s' % name)
                        continue
                    logger.debug('Adding %s to filelist' % name)
                    filelist.append(name)
                if len(filelist) > 1:
                    boot_tf.merge(filelist)
                else:
                    logger.warning('Skip merging since at least 2 files are needed, but only found %s' % (len(filelist)))
        else:
            logger.error('Failed to find manifest: %s' % manifest)
        boot_tf.update_manifest()
        boot_tf.upload()

    # This must be the last action since it will block the process
    if boot_tf.args.server:
        boot_tf.server(boot_tf.args.server)

if __name__ == "__main__":
    try:
        ret = main()
    except Exception as esc:
        ret = 1
        import traceback
        traceback.print_exc()
    sys.exit(ret)
