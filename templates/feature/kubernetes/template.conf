DISTRO_FEATURES:append = " virtualization k8s"
WRTEMPLATE_CLASSE:append = " meta-virt-k8s-cfg"

# kubernetes
WRL_RECIPES:virtualization-layer += 'kubernetes'
WRL_RECIPES:networking-layer += 'ebtables'
WRL_RECIPES:virtualization-layer += 'cni'
# k8s current can only be built with go 1.12
WRL_RECIPES:virtualization-layer += " \
    go \
    go-native \
    go-runtime \
    go-cross-${TUNE_PKGARCH} \
    go-cross-canadian-${TRANSLATED_TARGET_ARCH} \
    go-crosssdk-${SDK_SYS} \
"

# conntrack-tools
WRL_RECIPES:networking-layer += 'conntrack-tools'
WRL_RECIPES:networking-layer += 'libnetfilter-conntrack'
WRL_RECIPES:networking-layer += 'libnetfilter-cthelper'
WRL_RECIPES:networking-layer += 'libnetfilter-cttimeout'
WRL_RECIPES:networking-layer += 'libnetfilter-queue'
WRL_RECIPES:networking-layer += 'libnfnetlink'

# x86 is offically not supported by kubernetes, but wrlinux defaults to enable multilib for x86-64
NON_MULTILIB_RECIPES:append:x86-64 = " kubernetes"

# k8s uses systemd cgroup driver as the prefered cgroup driver, enable such support in runc
PACKAGECONFIG:pn-runc-docker = ""
PACKAGECONFIG:pn-runc-docker = "${@bb.utils.contains('DISTRO_FEATURES', 'seccomp', 'seccomp', '', d)} \
                                ${@bb.utils.contains('DISTRO_FEATURES', 'selinux', 'selinux', '', d)} \
	                       "

# Set preferred version to ensure things work well
PREFERRED_VERSION_cni = "0.7.1"
PREFERRED_VERSION_kubernetes = "1.22.1"

# wrlinux additional kubernetes configuration path
# The config fragment is set according to cmd/kubeadm/app/util/system/types_unix.go in kubernetes source
EXTRA_KERNEL_FILES =. "${LAYER_PATH_wrlinux}/templates/feature/kubernetes/files:"
EXTRA_KERNEL_SRC_URI += "file://wr-kubernetes.cfg"
